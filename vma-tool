#!/usr/bin/env python3
#
# vma-tool - a toolbox for managing and optimizing Proxmox VMA files
#
# Copyright (c) 2025, Lars Gust√§bel
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its
#    contributors may be used to endorse or promote products derived from
#    this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# pylint:disable=invalid-name,too-many-instance-attributes,attribute-defined-outside-init

"""Manage and optimize Proxmox VMA (virtual machine archive) files.
"""

import io
import os
import sys
import time
import hashlib
import argparse
import tempfile

from struct import Struct
from uuid import UUID, uuid4

OPTIMIZED_UUID = bytes.fromhex("12345678aabbccddeeffaabbccddeeff")
ZERO_BLOCK = b"\0" * 4096

VMA_CLUSTER_SIZE = 65536
VMA_HEADER_SIZE = 12288
VMA_EXTENT_HEADER_SIZE = 512
VMA_MAX_CONFIGS = 256
VMA_MAX_DEVICES = 256
VMA_BLOCKS_PER_EXTENT = 59


class EOF(EOFError):
    """An EOFError subclass that stores a file offset.
    """

    def __init__(self, offset):
        super().__init__()
        self.offset = offset

def md5(buf):
    """Calculate an md5 sum from a buffer.
    """
    return hashlib.md5(buf).digest()

def block512(n):
    """Round up <n> to a 512-block boundary.
    """
    return (n // 512 + 1) * 512

def split(s, sep):
    """Split a string <s> at <sep> into two parts.
    """
    return tuple(x.strip() for x in s.split(sep, 1))

def format_size(size):
    """Format <size> as a human-readable size.
    """
    for i, unit in enumerate(("TiB", "GiB", "MiB", "KiB", "B")):
        base = 1024 ** (4 - i)
        if size >= base:
            precision = 0 if unit == "B" else 1
            break
    return f"{size / base:.{precision}f} {unit}"

def safe_read(fobj, size):
    """Read <size> bytes from <fobj> and raise EOF if there was not enough data.
    """
    offset = fobj.tell()
    buf = fobj.read(size)
    if len(buf) != size:
        raise EOF(offset)
    return buf


class _Structure:
    """Represent a fixed-size structured binary buffer.
    """

    _struct = Struct("")

    def __init__(self):
        self._buf = io.BytesIO()

    @classmethod
    def read(cls, fobj):
        """Read and create an object from file object <fobj>.
        """
        offset = fobj.tell()
        buf = safe_read(fobj, cls._struct.size)
        obj = cls.__new__(cls) # we don't call __init__()
        obj._offset = offset
        obj._buf = buf
        obj.unpack(fobj, cls._struct.unpack(buf))
        return obj

    @classmethod
    def read_array(cls, fobj, count):
        a = []
        for _ in range(count):
            a.append(cls.read(fobj))
        return a

    def unpack(self, fobj, record):
        """Initialize an instance from the values in <record>.
        """
        raise NotImplementedError

    def pack(self):
        """Return a structured buffer representation of this instance.
        """
        raise NotImplementedError


class VMADeviceInfo(_Structure):
    """Block device information structure.
    """

    _struct = Struct("> I 4x Q 16x")

    def __init__(self, devname_ptr, size):
        super().__init__()

        self.devname_ptr = devname_ptr
        self.size = size

    def unpack(self, fobj, record):
        self.devname_ptr, self.size = record

    def pack(self):
        return self._struct.pack(self.devname_ptr, self.size)


class VMAHeader(_Structure):
    """Global vma file header structure.
    """

    _struct = Struct("> 4s I 16s Q 16s I I I 1984x 256I 256I 4x")

    def __init__(self, uuid, ctime=None):
        super().__init__()

        self.uuid = uuid
        self.ctime = ctime if ctime is not None else int(time.time())

        self.blob_buffer = BlobBuffer()
        self.configurations = {}
        self.devices = {}
        self.dev_id = 1

    def unpack(self, fobj, record):
        magic, version, self.uuid, self.ctime, self.md5sum, self.blob_buffer_offset, \
                self.blob_buffer_size, self.header_size = record[:8]

        if magic != b"VMA\0":
            raise SystemExit("ERROR: not a VMA file")

        if version != 1:
            raise SystemExit("ERROR: only VMA version 1 is supported!")

        config_names = record[8:264]
        config_data = record[264:520]

        dev_info = VMADeviceInfo.read_array(fobj, VMA_MAX_DEVICES)
        self._buf += b"".join(d._buf for d in dev_info)

        blob_buffer = BlobBuffer.read(fobj, self.blob_buffer_size)
        self._buf += blob_buffer._buf + safe_read(fobj, self.header_size - fobj.tell())

        self.configurations = {}
        for name_ptr, data_ptr in zip(config_names, config_data):
            if name_ptr == 0:
                continue
            name = os.fsdecode(blob_buffer[name_ptr])
            data = blob_buffer[data_ptr]
            self.configurations[name] = data

        self.devices = {}
        for dev_id, dev in enumerate(dev_info):
            if dev.size == 0:
                continue
            name = os.fsdecode(blob_buffer[dev.devname_ptr])
            self.devices[dev_id] = (name, dev_info[dev_id].size)

        if md5(self._buf[:32] + b"\0" * 16 + self._buf[48:]) != self.md5sum:
            raise SystemExit(f"ERROR: corrupt file, damaged VMA header at 0x{self._offset:x}!")

    def add_config(self, name, data):
        """Add a configuration file to the blob buffer.
        """
        self.configurations[name] = data

    def add_device(self, name, size):
        """Add a device name to the blob buffer.
        """
        self.devices[self.dev_id] = (name, size)
        self.dev_id += 1

    def pack(self):
        config_names = []
        config_data = []
        configurations = self.configurations.copy()

        for i in range(VMA_MAX_CONFIGS):
            try:
                name, data = configurations.popitem()
            except KeyError:
                config_names.append(0)
                config_data.append(0)
            else:
                name = os.fsencode(name)
                config_names.append(self.blob_buffer.add_string(name))
                config_data.append(self.blob_buffer.add_blob(data))

        dev_info = []
        for dev_id in range(VMA_MAX_DEVICES):
            try:
                name, size = self.devices[dev_id]
            except KeyError:
                dev_info.append(VMADeviceInfo(0, 0))
            else:
                name = os.fsencode(name)
                dev_info.append(VMADeviceInfo(self.blob_buffer.add_string(name), size))

        dev_info_buf = b"".join(d.pack() for d in dev_info)

        self._buf.write(self._struct.pack(b"VMA\0", 1, self.uuid, self.ctime, b"\0" * 16,
                                          VMA_HEADER_SIZE, self.blob_buffer.size,
                                          VMA_HEADER_SIZE + block512(self.blob_buffer.size),
                                          *config_names, *config_data))

        self._buf.write(dev_info_buf)
        self._buf.write(self.blob_buffer.pack())

        buf = self._buf.getbuffer()
        buf[32:48] = md5(buf)
        buf.release()
        return self._buf.getvalue()


class BlobBuffer(dict):
    """A dictionary holding the blobs.
    """

    _struct = Struct("<H")

    def __init__(self):
        self._buf = io.BytesIO()

    @property
    def size(self):
        """Return the size of the blob buffer.
        """
        return self._buf.tell()

    @classmethod
    def read(cls, fobj, size):
        offset = fobj.tell()
        buf = safe_read(fobj, size)

        obj = cls.__new__(cls)
        obj._offset = offset
        obj._buf = buf

        s = cls._struct.size
        o = 1 # skip the first byte
        while o < len(buf):
            size = cls._struct.unpack(buf[o:o + s])[0]
            obj[o] = buf[o + s:o + s + size].rstrip(b"\0")
            o += s + size
        return obj

    def add_string(self, s):
        """Add a null-terminated string to the blob buffer.
        """
        return self.add_blob(s + b"\0")

    def add_blob(self, s):
        """Add raw data to the blob buffer.
        """
        offset = self._buf.tell()
        if offset == 0:
            # There is one null-byte padding at the start of the blob buffer.
            self._buf.write(b"\0")
            offset = 1

        self._buf.write(self._struct.pack(len(s)))
        self._buf.write(s)
        return offset

    def pack(self):
        """Return a structured buffer representation of this instance.
        """
        buf = self._buf.getvalue()
        return buf + b"\0" * (block512(len(buf)) - len(buf))


class Blockinfo(_Structure):
    """Structure that holds information about one cluster of data in an extent header.
    """

    _struct = Struct("> H x B I")

    def __init__(self, dev_id, cluster_num):
        super().__init__()

        self.mask = 0
        self.dev_id = dev_id
        self.cluster_num = cluster_num

        self.blocks = []

    def unpack(self, fobj, record):
        self.mask, self.dev_id, self.cluster_num = record
        self.blocks = []

    def read_blocks(self, fobj):
        """Read the blocks of data in this Blockinfo. Holes are stored as None values.
        """
        if self.blocks:
            return

        mask = self.mask
        for _ in range(16):
            if mask & 1:
                self.blocks.append(safe_read(fobj, 4096))
            else:
                self.blocks.append(None)
            mask >>= 1

    def get_blocks(self):
        """Return the blocks as a complete cluster omitting zero blocks.
        """
        return b"".join(block for block in self.blocks if block is not None)

    def get_cluster(self):
        """Return the blocks as a 64 KiB cluster with zero blocks instead of holes.
        """
        return b"".join(ZERO_BLOCK if block is None else block for block in self.blocks)

    def add(self, cluster):
        """Store a cluster of blocks.
        """
        count = 0
        for i in range(16):
            offset = i * 4096
            block = cluster[offset:offset+4096]

            if not block:
                # If a file does not line up to 65536 bytes,
                # we add "holes" at the end.
                block = ZERO_BLOCK

            self.mask >>= 1
            if block.count(b"\0") != 4096:
                self.mask |= 1 << 15
                self.blocks.append(block)
                count += 1
            else:
                self.blocks.append(None)

        return count

    def pack(self):
        return self._struct.pack(self.mask, self.dev_id, self.cluster_num)


class VMAExtentHeader(_Structure):
    """Extent header that contains up to 59 clusters with 16 4096-byte-blocks each.
    """

    _struct = Struct("> 4s 2x H 16s 16s")

    def __init__(self, uuid):
        super().__init__()

        self.uuid = uuid

        self.block_count = 0
        self.blockinfos = []

    def unpack(self, fobj, record):
        magic, self.block_count, self.uuid, self.md5sum = record

        if magic != b"VMAE":
            raise SystemExit(f"ERROR: corrupt file, no VMA extent found at 0x{self._offset:x}!")

        self.blockinfo = Blockinfo.read_array(fobj, VMA_BLOCKS_PER_EXTENT)
        self._buf += b"".join(b._buf for b in self.blockinfo)

        if md5(self._buf[:24] + b"\0" * 16 + self._buf[40:]) != self.md5sum:
            raise SystemExit(f"ERROR: corrupt file, damaged VMA extent at 0x{self._offset:x}!")

    def add(self, dev_id, cluster_num, cluster):
        """Add a cluster of data to the extent.
        """
        blockinfo = Blockinfo(dev_id, cluster_num)
        self.block_count += blockinfo.add(cluster)
        self.blockinfos.append(blockinfo)
        return len(self.blockinfos) == VMA_BLOCKS_PER_EXTENT

    def pack(self):
        # If there is no data, we do not need a VMA extent.
        if not self.blockinfos:
            return b""

        # Build the table of blockinfo objects and the buffer with the block data.
        blockinfo_buf = io.BytesIO()
        blocks_buf = io.BytesIO()
        for i in range(VMA_BLOCKS_PER_EXTENT):
            try:
                blockinfo = self.blockinfos[i]
            except IndexError:
                # pylint:disable=protected-access
                blockinfo_buf.write(b"\0" * Blockinfo._struct.size)
            else:
                blockinfo_buf.write(blockinfo.pack())
                blocks_buf.write(blockinfo.get_blocks())

        # Build the header structure.
        self._buf.write(self._struct.pack(b"VMAE", self.block_count, self.uuid, b"\0" * 16))
        self._buf.write(blockinfo_buf.getvalue())

        buf = self._buf.getbuffer()
        buf[24:40] = md5(buf)
        buf.release()

        # Add the block data.
        self._buf.write(blocks_buf.getvalue())
        return self._buf.getvalue()


class Config:
    """Store a qemu-server.conf configuration file data for access and modification.
    """

    def __init__(self, text):
        self.text = text

    def get(self, key, default=None):
        """Return the configuration value specified by <key>.
        """
        for line in self.text.decode("utf-8").splitlines():
            if line.startswith("#"):
                continue
            k, v = split(line, ":")
            if k == key:
                return v
        return default

    def set(self, key, value):
        """Modify the configuration <value> at <key>.
        """
        lines = []
        updated = False
        for line in self.text.decode("utf-8").splitlines():
            if not line or line.startswith("#"):
                lines.append(line)
            else:
                k, v = split(line, ":")
                if k == key:
                    updated = True
                    v = value
                lines.append(f"{k}: {v}")
        self.text = ("\n".join(lines) + "\n").encode("utf-8")
        return updated

    def getvalue(self):
        """Return the (modified) configuration file data.
        """
        return self.text


class VMAReader:
    """Read metadata and data from a Proxmox VMA file.
    """

    def __init__(self, fobj):
        self.fobj = fobj
        self.header = VMAHeader.read(self.fobj)

    def info(self):
        """Show detailed information about a VMA file.
        """
        print("filename:", self.fobj.name)
        print("uuid:", UUID(bytes=self.header.uuid))
        print("created:", time.asctime(time.localtime(self.header.ctime)))
        print("size:", format_size(os.fstat(self.fobj.fileno()).st_size))

        for name, config in self.header.configurations.items():
            if name == "qemu-server.conf":
                config = Config(config)
                print("name:", config.get("name", "<unset>"))

        ordered_blocks, optimized_uuid = self.check_optimized(1024**3)
        print("optimized:", end=" ")
        if ordered_blocks:
            if optimized_uuid:
                print("yes")
            else:
                print("partially")
        else:
            print("no")
        print()

        print("configurations:")
        for name, config in self.header.configurations.items():
            print(f"  {name} ({format_size(len(config))})")
        print()

        print("devices:")
        for dev_id, (name, size) in self.header.devices.items():
            print(f"  {dev_id}: {name} ({format_size(size)})")
        print()

    def iter_blocks(self, progress=False):
        """Generate Blockinfo objects for all device ids in the order they are stored.
        """
        if progress:
            total = os.fstat(self.fobj.fileno()).st_size

        seen = set()
        while True:
            offset = self.fobj.tell()
            try:
                extent = VMAExtentHeader.read(self.fobj)
            except EOF as exc:
                # pylint:disable=raise-missing-from
                if exc.offset == offset:
                    break
                raise SystemExit(f"ERROR: corrupt file, short VMA extent at 0x{exc.offset:x}!")

            for blockinfo in extent.blockinfo:
                if blockinfo.dev_id > 0:
                    key = (blockinfo.dev_id, blockinfo.cluster_num)
                    if key in seen:
                        print(f"ERROR: found duplicate cluster {key!r}!")
                    else:
                        seen.add(key)

                    blockinfo.read_blocks(self.fobj)
                    yield blockinfo

            if progress:
                print(f"\r  progress: {offset / total * 100:.1f}% ", end="", file=sys.stderr,
                      flush=True)

        if progress:
            print(file=sys.stderr)

    def iter_ordered_blocks(self, progress):
        """Generate Blockinfo objects for all device ids in ascending order.
        """
        # NOTE: Please note that:
        # - Devices are stored one after the other in descending order. Can we rely on the order?
        # - Device clusters are stored in no particular individual order, but ascending overall.
        # - Although devices are stored one after the other, individual clusters of different
        #   devices mix at the boundaries in many cases.
        # - We cannot safely say that we have seen the last cluster for a specific device, because
        #   "hole" clusters at the end of a device are not stored.

        threshold = 100
        max_cache = threshold * 2

        cluster_num = {dev_id: 0 for dev_id in self.header.devices}
        cache = {dev_id: {} for dev_id in self.header.devices}
        cur_dev_id = None

        for blockinfo in self.iter_blocks(progress):
            dev_id = blockinfo.dev_id
            if dev_id not in self.header.devices:
                continue
            elif cur_dev_id is None:
                cur_dev_id = dev_id

            # Put the cluster in the cache.
            try:
                cache[dev_id][blockinfo.cluster_num] = blockinfo
            except KeyError:
                raise SystemExit(f"ERROR: found cluster for device {dev_id} in device {cur_dev_id}!")

            # Yield all clusters from the cache that are in the right order.
            while cache[cur_dev_id] and cluster_num[cur_dev_id] in cache[cur_dev_id]:
                yield cache[cur_dev_id].pop(cluster_num[cur_dev_id])
                cluster_num[cur_dev_id] += 1

            # We do not switch to the next device unless the cache already has more than
            # <threshold> clusters for it.
            for d, c in list(cache.items()):
                if d == cur_dev_id:
                    continue
                if len(c) >= threshold and not cache[cur_dev_id]:
                    del cache[cur_dev_id]
                    cur_dev_id = d
                    break
                elif len(c) >= max_cache:
                    # Bail out if the cache for the next device continues to fill up but the
                    # current device is never completed.
                    raise SystemExit("ERROR: unable to detect boundary between device "\
                            f"{cur_dev_id} and {d}!")

        if cur_dev_id is not None:
            assert not cache[cur_dev_id]

    def check_optimized(self, bytes_to_read=None):
        """Check if the VMA file is optimized, i.e. if the data is ordered and if it uses the
           default uuid.
        """
        optimized_uuid = self.header.uuid == OPTIMIZED_UUID

        counter = {dev_id: 0 for dev_id in self.header.devices}
        cluster_num = {}
        for blockinfo in self.iter_blocks():
            dev_id = blockinfo.dev_id

            if dev_id not in self.header.devices:
                continue

            if blockinfo.cluster_num != cluster_num.get(dev_id, 0):
                counter[dev_id] += 1

            cluster_num[dev_id] = blockinfo.cluster_num + 1

            if bytes_to_read is not None and self.fobj.tell() >= bytes_to_read:
                break

        for c in counter.values():
            if c > 0:
                return False, optimized_uuid

        return True, optimized_uuid

    def unpack(self, directory, verbose, progress):
        """Extract all the configuration files and block device files to a <directory>.
        """
        # pylint:disable=consider-using-with
        try:
            os.makedirs(directory)
        except FileExistsError:
            pass

        for name, config in self.header.configurations.items():
            path = os.path.join(directory, name)
            if verbose:
                print("  extract config", name)
            with open(path + ".tmp", "wb") as dst:
                dst.write(config)
            os.rename(path + ".tmp", path)

        devices = {}
        sizes = {}
        try:
            for dev_id, (name, size) in self.header.devices.items():
                path = os.path.join(directory, name)
                devices[dev_id] = open(path + ".tmp", "wb")
                sizes[dev_id] = size
                if verbose:
                    print(f"  extract device {dev_id} ({format_size(size)})", name)

            self.extract_devices(devices, sizes, progress)

        except:
            raise
        else:
            for dst in devices.values():
                dst.close()
                os.rename(dst.name, os.path.splitext(dst.name)[0])

    def extract_devices(self, devices, sizes, progress):
        """Iterate through the VMA file extents and extract the data for all block devices
           simultaneously.
        """
        for blockinfo in self.iter_blocks(progress):
            if blockinfo.dev_id not in devices:
                continue

            dst = devices[blockinfo.dev_id]
            dst.seek(blockinfo.cluster_num * VMA_CLUSTER_SIZE)

            for buf in blockinfo.blocks:
                if buf is not None:
                    dst.write(buf)
                else:
                    dst.seek(4096, os.SEEK_CUR)

        for dst, size in zip(devices.values(), sizes.values()):
            os.truncate(dst.fileno(), size)


class Main:
    """Parse command line arguments and run the specified action.
    """

    def __init__(self):
        self.args = parse_arguments()

    def run(self):
        """Run the specified action.
        """
        getattr(self, self.args.command)()

    def info(self):
        """Show detailed information about a VMA file.
        """
        with open(self.args.source, "rb") as src:
            reader = VMAReader(src)
            reader.info()

    def unpack(self):
        """Unpack the contents of a VMA file to a directory.
        """
        self._unpack(self.args.destination)

    def _unpack(self, destination):
        if self.args.verbose:
            print("read", self.args.source)
            print("  working directory:", os.path.abspath(destination))

        with open(self.args.source, "rb") as src:
            reader = VMAReader(src)
            reader.unpack(destination, self.args.verbose, self.args.progress)
        return reader.header.uuid, reader.header.ctime

    def pack(self):
        """Pack the contents of a directory in a VMA file.
        """
        self._pack(self.args.source, OPTIMIZED_UUID if self.args.optimize else uuid4().bytes, None)

    def _pack(self, source, uuid, ctime):
        if self.args.verbose:
            print("write", self.args.destination)
            print("  working directory:", os.path.abspath(source))

        with open(self.args.destination + ".tmp", "wb") as dst:
            vma_header = VMAHeader(uuid, ctime)

            names = sorted(os.listdir(source))

            # Store configuration file blobs.
            for name in names:
                if name.startswith("drive-"):
                    continue

                path = os.path.join(source, name)
                if self.args.verbose:
                    print("  pack config", name)

                with open(path, "rb") as src:
                    config = src.read()
                    if name == "qemu-server.conf" and self.args.update:
                        config = Config(config)
                        for key, value in self.args.update:
                            if config.set(key, value):
                                if self.args.verbose:
                                    print(f"  update {key}={value}")
                            else:
                                if self.args.verbose:
                                    print(f"  ERROR: unable to update non-standard key {key!r}")
                        config = config.getvalue()
                    name = os.fsencode(name)
                    vma_header.add_config(name, config)

            # Store device name blobs.
            total = 0
            for name in names:
                if not name.startswith("drive-"):
                    continue

                path = os.path.join(source, name)
                size = os.path.getsize(path)
                vma_header.add_device(os.fsencode(name), size)
                total += size

            dst.write(vma_header.pack())

            # Store device files.
            dev_id = 1
            cluster_num = 0
            pos = 0
            for name in names:
                if not name.startswith("drive-"):
                    continue

                path = os.path.join(source, name)
                if self.args.verbose:
                    print("\r  pack device", name)

                with open(path, "rb") as src:
                    extent = VMAExtentHeader(uuid)
                    while True:
                        cluster = src.read(VMA_CLUSTER_SIZE)
                        if not cluster:
                            break

                        pos += VMA_CLUSTER_SIZE
                        if self.args.progress:
                            print(f"\r  progress: {pos / total * 100:.1f}% ", end="",
                                  file=sys.stderr, flush=True)

                        if extent.add(dev_id, cluster_num, cluster):
                            dst.write(extent.pack())
                            extent = VMAExtentHeader(uuid)
                        cluster_num += 1

                    dst.write(extent.pack())

                dev_id += 1
                cluster_num = 0

            if self.args.progress:
                print(file=sys.stderr)

        os.rename(self.args.destination + ".tmp", self.args.destination)

    def optimize(self):
        """Unpack and repack a VMA file.
        """
        if self.args.destination is None:
            self.args.destination = self.args.source
            if self.args.verbose:
                print(f"INFO: optimize {self.args.destination} in-place")

        if self.args.verbose:
            print("read", self.args.source)

        with open(self.args.source, "rb") as src:
            reader = VMAReader(src)
            if reader.header.uuid == OPTIMIZED_UUID:
                if self.args.verbose:
                    print("  INFO: archive is already optimized")
                sys.exit(0)

            with open(self.args.destination + ".tmp", "wb") as dst:
                vma_header = VMAHeader(OPTIMIZED_UUID, reader.header.ctime)
                vma_header.configurations = reader.header.configurations
                vma_header.devices = reader.header.devices
                dst.write(vma_header.pack())

                extent = None
                for blockinfo in reader.iter_ordered_blocks(self.args.progress):
                    if extent is None:
                        extent = VMAExtentHeader(OPTIMIZED_UUID)

                    if extent.add(blockinfo.dev_id, blockinfo.cluster_num, blockinfo.get_cluster()):
                        dst.write(extent.pack())
                        extent = None

                if extent is not None:
                    dst.write(extent.pack())

        os.rename(self.args.destination + ".tmp", self.args.destination)


def parse_arguments():
    """Parse and prepare command line arguments.
    """
    parser = argparse.ArgumentParser()
    parser.set_defaults(command=None, verbose=None, progress=None)
    subparsers = parser.add_subparsers()

    dump_parser = subparsers.add_parser("info",
                                help="show information and table of contents for a vma file")
    dump_parser.set_defaults(command="info")
    dump_parser.add_argument("source", help="the vma file to read")

    unpack_parser = subparsers.add_parser("unpack",
                                          help="unpack the contents of a vma file to a directory")
    unpack_parser.set_defaults(command="unpack")
    unpack_parser.add_argument("-q", "--quiet", action="store_false", dest="verbose",
                               default=True, help="suppress informational output")
    unpack_parser.add_argument("-P", "--no-progress", action="store_false", dest="progress",
                               help="suppress progress output")
    unpack_parser.add_argument("source", help="the vma file to read")
    unpack_parser.add_argument("destination", default=os.getcwd(),
                               help="extract to this directory")

    pack_parser = subparsers.add_parser("pack", help="create a vma file from a directory")
    pack_parser.set_defaults(command="pack")
    pack_parser.add_argument("-q", "--quiet", action="store_false", dest="verbose",
                             default=True, help="suppress informational output")
    pack_parser.add_argument("-P", "--no-progress", action="store_false", dest="progress",
                             help="suppress progress output")
    pack_parser.add_argument("-u", "--update", action="append", type=lambda s: split(s, "="),
                             help="update configuration entries, e.g. -u name=foobar")
    pack_parser.add_argument("-O", "--optimize", action="store_true", default=False,
                             help="optimize for better deduplication")
    pack_parser.add_argument("source", help="a directory with configuration and device files")
    pack_parser.add_argument("destination", help="the name of the target vma file")

    optimize_parser = subparsers.add_parser("optimize",
                    help="repack a vma file to optimize its deduplication properties")
    optimize_parser.set_defaults(command="optimize")
    optimize_parser.add_argument("-q", "--quiet", action="store_false", dest="verbose",
                                 default=True, help="suppress informational output")
    optimize_parser.add_argument("-P", "--no-progress", action="store_false", dest="progress",
                                 help="suppress progress output")
    optimize_parser.add_argument("-u", "--update", action="append",
                                 type=lambda s: split(s, "="),
                                 help="update configuration entries, e.g. -u name=foobar")
    optimize_parser.add_argument("source", help="the vma file to read")
    optimize_parser.add_argument("destination", nargs="?",
                                 help="the name of the target vma file")

    args = parser.parse_args()

    if args.command is None:
        parser.error("choose an action")

    if args.verbose is False:
        args.progress = False
    elif args.progress is None:
        args.progress = sys.stderr.isatty()

    return args


if __name__ == "__main__":
    main = Main()
    main.run()
